{"version":3,"file":"markdown.js","sourceRoot":"","sources":["../../tmp/utils/markdown.ts"],"names":[],"mappings":"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","sourcesContent":["import { MarkdownParser } from 'prosemirror-markdown'\nimport { Fragment, Node as ProsemirrorNode, Schema } from 'prosemirror-model'\nimport { PrimitiveType } from '../components/model'\n\nexport class SpacePreservingMarkdownParser {\n\tconstructor(private mkdp: MarkdownParser) {}\n\n\tparse(primitiveValue: PrimitiveType): ProsemirrorNode | null {\n\t\tif (primitiveValue.type !== 'string') {\n\t\t\treturn null\n\t\t}\n\t\tconst value = primitiveValue.value\n\t\tconst node = this.mkdp.parse(value)\n\t\tconst trailingSpaces = value.match(/([ ]+)$/)?.[1]\n\t\tif (node && trailingSpaces) {\n\t\t\tconst appendTextToLastTextChild = (node: ProsemirrorNode, text: string): ProsemirrorNode => {\n\t\t\t\tif (node.isText) {\n\t\t\t\t\treturn (node as any).withText(node.text + text)\n\t\t\t\t}\n\t\t\t\tconst lastChild = node.lastChild\n\t\t\t\tif (lastChild) {\n\t\t\t\t\treturn node.copy(node.content.replaceChild(node.childCount - 1, appendTextToLastTextChild(lastChild, text)))\n\t\t\t\t}\n\t\t\t\treturn node\n\t\t\t}\n\n\t\t\treturn appendTextToLastTextChild(node, trailingSpaces)\n\t\t}\n\t\treturn node\n\t}\n}\n\nexport const preprocessEmptyNodes = (node: ProsemirrorNode, schema: Schema): ProsemirrorNode => {\n\tconst content = node.content\n\tif (node.isText) {\n\t\treturn (node as any).withText((node.text ?? '').replace(/^( +)/g, (x) => x.replace(/ /g, '\\u00a0')))\n\t}\n\tif (node.isBlock && node.type.name === 'paragraph' && content.size === 0) {\n\t\treturn node.copy(Fragment.fromArray([schema.text('\\u00a0')]))\n\t}\n\tif (content.childCount === 0) {\n\t\treturn node\n\t}\n\tlet idx = 0\n\tconst iterate = {\n\t\tnext: () => {\n\t\t\tif (content.childCount === idx) return { value: content.child(idx - 1), done: true }\n\t\t\treturn { value: content.child(idx++), done: false }\n\t\t},\n\t\t[Symbol.iterator]() {\n\t\t\treturn this\n\t\t},\n\t}\n\tconst originals = Array.from(iterate)\n\tconst treated = originals.map((n) => preprocessEmptyNodes(n, schema))\n\treturn node.copy(Fragment.fromArray(treated))\n}\n"]}