{"version":3,"file":"primitive.js","sourceRoot":"","sources":["../../tmp/utils/primitive.ts"],"names":[],"mappings":";;;AACA,mCAAuC;AAEhC,MAAM,aAAa,GAAG,CAAC,KAAa,EAAE,IAAa,EAAU,EAAE;IACrE,IAAI,CAAC,IAAI,EAAE,CAAC;QACX,OAAO,KAAK,CAAA;IACb,CAAC;IACD,QAAQ,IAAI,EAAE,CAAC;QACd,KAAK,IAAI;YACR,OAAO,KAAK,CAAA;QACb,KAAK,GAAG;YACP,OAAO,KAAK,GAAG,IAAI,CAAA;QACpB,KAAK,IAAI;YACR,OAAO,KAAK,GAAG,OAAO,CAAA;QACvB,KAAK,GAAG;YACP,OAAO,KAAK,CAAA;QACb,KAAK,IAAI;YACR,OAAO,KAAK,GAAG,IAAI,CAAA;QACpB,KAAK,IAAI;YACR,OAAO,KAAK,GAAG,GAAG,CAAA;QACnB,KAAK,GAAG;YACP,OAAO,KAAK,CAAA;QACb,KAAK,IAAI;YACR,OAAO,KAAK,GAAG,GAAG,CAAA;QACnB,KAAK,IAAI;YACR,OAAO,KAAK,GAAG,IAAI,CAAA;QACpB,KAAK,GAAG;YACP,OAAO,KAAK,CAAA;QACb,KAAK,KAAK;YACT,OAAO,KAAK,GAAG,EAAE,CAAA;QAClB,KAAK,GAAG;YACP,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,CAAA;QACvB,KAAK,GAAG;YACP,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;QAC5B,KAAK,MAAM;YACV,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;QAChC,KAAK,OAAO;YACX,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAA;QACjC,KAAK,MAAM;YACV,OAAO,KAAK,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,CAAA;IACtC,CAAC;IACD,OAAO,KAAK,CAAA;AACb,CAAC,CAAA;AAvCY,QAAA,aAAa,iBAuCzB;AAGM,MAAM,cAAc,GAAG,CAAC,KAAoB,EAAmC,EAAE;IACvF,QAAQ,KAAK,CAAC,IAAI,EAAE,CAAC;QACpB,KAAK,SAAS;YACb,MAAM,eAAe,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAA,qBAAa,EAAC,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAA;YACzF,OAAO,eAAe,CAAA;QACvB,KAAK,UAAU;YACd,OAAO,IAAA,qBAAa,EAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAClC,KAAK,WAAW;YACf,OAAO,IAAA,qBAAa,EAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAClC,KAAK,QAAQ;YACZ,OAAO,CAAC,KAAK,CAAC,KAAK,CAAA;QACpB,KAAK,SAAS;YACb,OAAO,KAAK,CAAC,KAAK,CAAA;QACnB,KAAK,QAAQ;YACZ,OAAO,KAAK,CAAC,KAAK,CAAA;QACnB,KAAK,UAAU;YACd,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;iBAC/B,GAAG,CAAC,sBAAc,CAAC;iBACnB,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,SAAS,CAA0B,CAAA;IAC3D,CAAC;AACF,CAAC,CAAA;AApBY,QAAA,cAAc,kBAoB1B","sourcesContent":["import { PrimitiveType } from '../components/model'\nimport { anyDateToDate } from './dates'\n\nexport const normalizeUnit = (value: number, unit?: string): number => {\n\tif (!unit) {\n\t\treturn value\n\t}\n\tswitch (unit) {\n\t\tcase 'kg':\n\t\t\treturn value\n\t\tcase 'g':\n\t\t\treturn value / 1000\n\t\tcase 'mg':\n\t\t\treturn value / 1000000\n\t\tcase 'l':\n\t\t\treturn value\n\t\tcase 'ml':\n\t\t\treturn value / 1000\n\t\tcase 'cl':\n\t\t\treturn value / 100\n\t\tcase 'm':\n\t\t\treturn value\n\t\tcase 'cm':\n\t\t\treturn value / 100\n\t\tcase 'mm':\n\t\t\treturn value / 1000\n\t\tcase 's':\n\t\t\treturn value\n\t\tcase 'min':\n\t\t\treturn value * 60\n\t\tcase 'h':\n\t\t\treturn value * 60 * 60\n\t\tcase 'd':\n\t\t\treturn value * 60 * 60 * 24\n\t\tcase 'week':\n\t\t\treturn value * 60 * 60 * 24 * 7\n\t\tcase 'month':\n\t\t\treturn value * 60 * 60 * 24 * 30\n\t\tcase 'year':\n\t\t\treturn value * 60 * 60 * 24 * 365.25\n\t}\n\treturn value\n}\n\nexport type ParsedPrimitiveType = number | string | boolean | Date | ParsedPrimitiveType[]\nexport const parsePrimitive = (value: PrimitiveType): ParsedPrimitiveType | undefined => {\n\tswitch (value.type) {\n\t\tcase 'measure':\n\t\t\tconst normalizedValue = value.value ? normalizeUnit(+value.value, value.unit) : undefined\n\t\t\treturn normalizedValue\n\t\tcase 'datetime':\n\t\t\treturn anyDateToDate(value.value)\n\t\tcase 'timestamp':\n\t\t\treturn anyDateToDate(value.value)\n\t\tcase 'number':\n\t\t\treturn +value.value\n\t\tcase 'boolean':\n\t\t\treturn value.value\n\t\tcase 'string':\n\t\t\treturn value.value\n\t\tcase 'compound':\n\t\t\treturn Object.values(value.value)\n\t\t\t\t.map(parsePrimitive)\n\t\t\t\t.filter((x) => x !== undefined) as ParsedPrimitiveType[]\n\t}\n}\n"]}