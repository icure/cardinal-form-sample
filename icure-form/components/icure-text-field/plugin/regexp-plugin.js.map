{"version":3,"file":"regexp-plugin.js","sourceRoot":"","sources":["../../../../tmp/components/icure-text-field/plugin/regexp-plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plugin, TextSelection } from 'prosemirror-state'\n\nexport const regexpPlugin = function (): Plugin {\n\treturn new Plugin({\n\t\tprops: {\n\t\t\thandleTextInput: (view, from, to, text) => {\n\t\t\t\tif (view.composing) return false\n\n\t\t\t\tconst state = view.state\n\t\t\t\tconst $from = state.doc.resolve(from)\n\t\t\t\tconst mask = $from.parent.type.spec.mask\n\t\t\t\tconst regexp = $from.parent.type.spec.regexp\n\n\t\t\t\tif (mask || !regexp) return false // Will be handled by mask plugin\n\n\t\t\t\tconst allowedCharacters = text\n\t\t\t\t\t.split('')\n\t\t\t\t\t.filter((x) => x.match(new RegExp(regexp)))\n\t\t\t\t\t.join('')\n\t\t\t\tif (allowedCharacters === text) return false\n\n\t\t\t\tlet tr = state.tr\n\t\t\t\tif (allowedCharacters.length) {\n\t\t\t\t\ttr = tr.insertText(allowedCharacters, from, to)\n\t\t\t\t\ttr = tr.setSelection(TextSelection.create(tr.doc, Math.min(to + allowedCharacters.length, tr.doc.content.size - 1)))\n\t\t\t\t}\n\n\t\t\t\tif (text.startsWith(allowedCharacters)) {\n\t\t\t\t\tconst tail = text.substring(allowedCharacters.length)\n\t\t\t\t\tif (tail?.length) {\n\t\t\t\t\t\tlet posMark = tr.selection.$to.pos + 1\n\t\t\t\t\t\twhile (posMark < tr.doc.content.size) {\n\t\t\t\t\t\t\tconst nextPos = tr.doc.resolve(posMark)\n\t\t\t\t\t\t\tconst nextNode = nextPos.node(nextPos.depth)\n\t\t\t\t\t\t\tif (nextNode && (nextNode.type.isText || nextNode.type.isTextblock)) {\n\t\t\t\t\t\t\t\ttr = tr.insertText(tail, nextPos.pos, nextPos.pos)\n\t\t\t\t\t\t\t\ttr = tr.setSelection(TextSelection.create(tr.doc, Math.min(nextPos.pos + tail.length, tr.doc.content.size - 1)))\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tposMark++\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tview.dispatch(tr)\n\n\t\t\t\treturn true\n\t\t\t},\n\t\t},\n\t})\n}\n"]}