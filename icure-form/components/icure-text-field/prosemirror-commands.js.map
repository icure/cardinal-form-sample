{"version":3,"file":"prosemirror-commands.js","sourceRoot":"","sources":["../../../tmp/components/icure-text-field/prosemirror-commands.ts"],"names":[],"mappings":";;;AAAA,iEAAgE;AAChE,yDAA6D;AAC7D,yDAA2E;AAE3E,qFAAqF;AACrF,gEAAgE;AAChE,cAAc;AACd,SAAgB,cAAc,CAAC,QAAkB,EAAE,KAAkC;IACpF,OAAO,UAAU,KAAkB,EAAE,QAAoC;;QACxE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC,SAAS,CAAA;QAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;QACnC,IAAI,CAAC,KAAK,EAAE,CAAC;YACZ,OAAO,KAAK,CAAA;QACb,CAAC;QACD,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,CAAA;QACxC,IAAI,IAAI,EAAE,CAAC;YACV,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;YAC9B,IAAI,CAAA,MAAA,MAAA,iCAAa,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,KAAK,0CAAE,IAAI,EAAE,0CAAE,IAAI,MAAK,QAAQ,EAAE,CAAC;gBAC3E,OAAO,KAAK,CAAA;YACb,CAAC;QACF,CAAC;QAED,MAAM,QAAQ,GAAG,KAAK,IAAI,IAAA,oCAAY,EAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAA;QAC9D,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK;YAAE,OAAO,KAAK,CAAA;QACrC,IAAI,QAAQ;YAAE,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC,CAAA;QACvE,OAAO,IAAI,CAAA;IACZ,CAAC,CAAA;AACF,CAAC;AApBD,wCAoBC;AAED,qFAAqF;AACrF,gEAAgE;AAChE,cAAc;AACd,6DAA6D;AAC7D,SAAgB,UAAU,CAAC,QAAkB;IAC5C,OAAO,UAAU,KAAkB,EAAE,QAAoC;QACxE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC,SAAS,CAAA;QACtC,MAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAA;QACnC,MAAM,KAAK,GAAG,KAAK,IAAI,IAAA,kCAAU,EAAC,KAAK,CAAC,CAAA;QAExC,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YAC3C,OAAO,KAAK,CAAA;QACb,CAAC;QAED,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,EACvC,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;QAC9B,MAAM,IAAI,GAAG,4BAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAA;QAExC,IAAI,QAAQ;YAAE,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,yBAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAA;QACvG,OAAO,IAAI,CAAA;IACZ,CAAC,CAAA;AACF,CAAC;AAjBD,gCAiBC","sourcesContent":["import { findWrapping, liftTarget } from 'prosemirror-transform'\nimport { Fragment, NodeType, Slice } from 'prosemirror-model'\nimport { EditorState, NodeSelection, Transaction } from 'prosemirror-state'\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Wrap the selection in a node of the given type with the given\n// attributes.\nexport function wrapInIfNeeded(nodeType: NodeType, attrs?: { [key: string]: unknown }) {\n\treturn function (state: EditorState, dispatch?: (tr: Transaction) => void): boolean {\n\t\tconst { $from, $to, to } = state.selection\n\t\tconst range = $from.blockRange($to)\n\t\tif (!range) {\n\t\t\treturn false\n\t\t}\n\t\tconst same = range.$from.sharedDepth(to)\n\t\tif (same) {\n\t\t\tconst pos = $from.before(same)\n\t\t\tif (NodeSelection.create(state.doc, pos).$from?.node()?.type === nodeType) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\tconst wrapping = range && findWrapping(range, nodeType, attrs)\n\t\tif (!wrapping || !range) return false\n\t\tif (dispatch) dispatch(state.tr.wrap(range, wrapping).scrollIntoView())\n\t\treturn true\n\t}\n}\n\n// :: (NodeType, ?Object) → (state: EditorState, dispatch: ?(tr: Transaction)) → bool\n// Wrap the selection in a node of the given type with the given\n// attributes.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function unwrapFrom(nodeType: NodeType) {\n\treturn function (state: EditorState, dispatch?: (tr: Transaction) => void): boolean {\n\t\tconst { $from, $to } = state.selection\n\t\tconst range = $from.blockRange($to)\n\t\tconst depth = range && liftTarget(range)\n\n\t\tif (depth === null || depth === undefined) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst gapStart = $from.before(depth + 1),\n\t\t\tgapEnd = $to.after(depth + 1)\n\t\tconst frag = Fragment.from($from.node())\n\n\t\tif (dispatch) dispatch(state.tr.replaceRange(gapStart, gapEnd, new Slice(frag, 0, 0)).scrollIntoView())\n\t\treturn true\n\t}\n}\n"]}